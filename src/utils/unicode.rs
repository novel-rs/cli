use hashbrown::HashMap;
use once_cell::sync::Lazy;

pub static CONVERT_MAP: Lazy<HashMap<char, char>> = Lazy::new(|| {
    HashMap::from([
        ('ÔºÇ', '"'),
        ('ÔºÉ', '#'),
        ('ÔºÑ', '$'),
        ('ÔºÖ', '%'),
        ('ÔºÜ', '&'),
        ('Ôºá', '\''),
        ('Ôºä', '*'),
        ('Ôºã', '+'),
        ('Ôºé', '.'),
        ('Ôºè', '/'),
        ('Ôºê', '0'),
        ('Ôºë', '1'),
        ('Ôºí', '2'),
        ('Ôºì', '3'),
        ('Ôºî', '4'),
        ('Ôºï', '5'),
        ('Ôºñ', '6'),
        ('Ôºó', '7'),
        ('Ôºò', '8'),
        ('Ôºô', '9'),
        ('Ôºú', '<'),
        ('Ôºù', '='),
        ('Ôºû', '>'),
        ('Ôº†', '@'),
        ('Ôº°', 'A'),
        ('Ôº¢', 'B'),
        ('Ôº£', 'C'),
        ('Ôº§', 'D'),
        ('Ôº•', 'E'),
        ('Ôº¶', 'F'),
        ('Ôºß', 'G'),
        ('Ôº®', 'H'),
        ('Ôº©', 'I'),
        ('Ôº™', 'J'),
        ('Ôº´', 'K'),
        ('Ôº¨', 'L'),
        ('Ôº≠', 'M'),
        ('ÔºÆ', 'N'),
        ('ÔºØ', 'O'),
        ('Ôº∞', 'P'),
        ('Ôº±', 'Q'),
        ('Ôº≤', 'R'),
        ('Ôº≥', 'S'),
        ('Ôº¥', 'T'),
        ('Ôºµ', 'U'),
        ('Ôº∂', 'V'),
        ('Ôº∑', 'W'),
        ('Ôº∏', 'X'),
        ('Ôºπ', 'Y'),
        ('Ôº∫', 'Z'),
        ('Ôºº', '\\'),
        ('Ôºæ', '^'),
        ('ÔΩÄ', '`'),
        ('ÔΩÅ', 'a'),
        ('ÔΩÇ', 'b'),
        ('ÔΩÉ', 'c'),
        ('ÔΩÑ', 'd'),
        ('ÔΩÖ', 'e'),
        ('ÔΩÜ', 'f'),
        ('ÔΩá', 'g'),
        ('ÔΩà', 'h'),
        ('ÔΩâ', 'i'),
        ('ÔΩä', 'j'),
        ('ÔΩã', 'k'),
        ('ÔΩå', 'l'),
        ('ÔΩç', 'm'),
        ('ÔΩé', 'n'),
        ('ÔΩè', 'o'),
        ('ÔΩê', 'p'),
        ('ÔΩë', 'q'),
        ('ÔΩí', 'r'),
        ('ÔΩì', 's'),
        ('ÔΩî', 't'),
        ('ÔΩï', 'u'),
        ('ÔΩñ', 'v'),
        ('ÔΩó', 'w'),
        ('ÔΩò', 'x'),
        ('ÔΩô', 'y'),
        ('ÔΩö', 'z'),
        ('ÔΩõ', '{'),
        ('ÔΩú', '|'),
        ('ÔΩù', '}'),
        ('ÔΩ°', '„ÄÇ'),
        ('ÔΩ¢', '„Äå'),
        ('ÔΩ£', '„Äç'),
        ('ÔΩ§', '„ÄÅ'),
        ('ÔΩ•', '¬∑'),
        ('‚Ä¢', '¬∑'),
        ('‚îÄ', '‚Äî'),
        ('‚Äï', '‚Äî'),
        ('‚à∂', 'Ôºö'),
        ('‚Äß', '¬∑'),
        ('„Éª', '¬∑'),
        ('Ôπë', '„ÄÅ'),
        ('„Äú', 'ÔΩû'),
        ('Ô∏∞', 'Ôºö'),
        ('?', 'Ôºü'),
        ('!', 'ÔºÅ'),
        (',', 'Ôºå'),
        (';', 'Ôºõ'),
        ('(', 'Ôºà'),
        (')', 'Ôºâ'),
    ])
});

// https://zh.wiktionary.org/wiki/
pub static CONVERT_T2S_MAP: Lazy<HashMap<char, char>> = Lazy::new(|| {
    HashMap::from([
        ('Â¶≥', '‰Ω†'),
        ('Âßä', 'Âßê'),
        ('Êì°', 'Êä¨'),
        ('Áâ†', 'ÂÆÉ'),
        ('Á∑ñ', 'Áª™'),
        ('Êèπ', 'ËÉå'),
    ])
});

// https://zh.wikipedia.org/wiki/%E4%B8%AD%E6%97%A5%E9%9F%93%E7%B5%B1%E4%B8%80%E8%A1%A8%E6%84%8F%E6%96%87%E5%AD%97
#[must_use]
#[inline]
pub const fn is_cjk(c: char) -> bool {
    c == '\u{3007}'
        || range(c, '\u{3400}', '\u{4DBF}')
        || range(c, '\u{4E00}', '\u{9FFF}')
        || range(c, '\u{FA0E}', '\u{FA0F}')
        || c == '\u{FA11}'
        || range(c, '\u{FA13}', '\u{FA14}')
        || c == '\u{FA1F}'
        || c == '\u{FA21}'
        || range(c, '\u{FA23}', '\u{FA24}')
        || range(c, '\u{FA27}', '\u{FA29}')
        || range(c, '\u{20000}', '\u{2A6DF}')
        || range(c, '\u{2A700}', '\u{2B739}')
        || range(c, '\u{2B740}', '\u{2B81D}')
        || range(c, '\u{2B820}', '\u{2CEA1}')
        || range(c, '\u{2CEB0}', '\u{2EBE0}')
        || range(c, '\u{2EBF0}', '\u{2EE5F}')
        || range(c, '\u{30000}', '\u{3134A}')
        || range(c, '\u{31350}', '\u{323AF}')
}

#[must_use]
#[inline]
const fn range(c: char, min: char, max: char) -> bool {
    c >= min && c <= max
}

// https://zh.wikipedia.org/wiki/%E6%A0%87%E7%82%B9%E7%AC%A6%E5%8F%B7
#[must_use]
#[inline]
pub const fn is_chinese_punctuation(c: char) -> bool {
    c =='„ÄÇ' || c =='Ôºü' || c =='ÔºÅ' ||
     c =='Ôºå' || c =='„ÄÅ' || c =='Ôºõ' ||
     c =='Ôºö' || c =='‚Äú' || c =='‚Äù' ||
     c =='„Äé' || c =='„Äè' || c =='‚Äò' ||
     c =='‚Äô' || c =='„Äå' || c =='„Äç' ||
     c =='Ôºà' || c =='Ôºâ' || c =='Ôºª' ||
     c =='ÔºΩ' || c =='„Äî' || c =='„Äï' ||
     c =='„Äê' || c =='„Äë' ||
     // ‚Äî‚Äî
     c =='‚Äî' ||
     // ‚Ä¶‚Ä¶
     c =='‚Ä¶' || c =='Ôºç' || c =='-' ||
     c =='ÔΩû' || c =='¬∑' || c =='„Ää' ||
     c =='„Äã' || c =='„Äà' || c =='„Äâ' ||
     // ÔπèÔπè
     c =='Ôπè' ||
     // ÔºøÔºø
     c =='Ôºø' || c =='.'
}

// https://zh.wikipedia.org/wiki/%E6%A0%87%E7%82%B9%E7%AC%A6%E5%8F%B7
#[must_use]
#[inline]
pub const fn is_english_punctuation(c: char) -> bool {
    c == '.'
        || c == '?'
        || c == '!'
        || c == ','
        || c == ':'
        || c == '‚Ä¶'
        || c == ';'
        || c == '-'
        || c == '‚Äì'
        || c == '‚Äî'
        || c == '('
        || c == ')'
        || c == '['
        || c == ']'
        || c == '{'
        || c == '}'
        || c == '"'
        || c == '\''
        || c == '/'
}

#[must_use]
#[inline]
pub const fn is_punctuation(c: char) -> bool {
    is_chinese_punctuation(c) || is_english_punctuation(c)
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_is_cjk() {
        assert!(is_cjk('‰Ω†'));
        assert!(is_cjk('„Äá'));
        assert!(is_cjk('‰Äπ'));
        assert!(is_cjk('ÈøÉ'));
        assert!(is_cjk('\u{9FEB}'));
        assert!(is_cjk('Ô®ß'));
        assert!(is_cjk('±ûà'));

        assert!(!is_cjk('a'));
        assert!(!is_cjk('üçå'));
    }
}
